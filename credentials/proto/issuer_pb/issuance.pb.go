// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issuance.proto

package issuer_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Issuance struct {
	Signature            string `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	IssuerPublicKey      string `protobuf:"bytes,2,opt,name=issuer_public_key,json=issuerPublicKey" json:"issuer_public_key,omitempty"`
	RecipientPublicKey   string `protobuf:"bytes,3,opt,name=recipient_public_key,json=recipientPublicKey" json:"recipient_public_key,omitempty"`
	RevokationStatus     bool   `protobuf:"varint,4,opt,name=revokation_status,json=revokationStatus" json:"revokation_status,omitempty"`
	ProofOfIntegrityHash string `protobuf:"bytes,5,opt,name=proof_of_integrity_hash,json=proofOfIntegrityHash" json:"proof_of_integrity_hash,omitempty"`
}

func (m *Issuance) Reset()                    { *m = Issuance{} }
func (m *Issuance) String() string            { return proto.CompactTextString(m) }
func (*Issuance) ProtoMessage()               {}
func (*Issuance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Issuance) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Issuance) GetIssuerPublicKey() string {
	if m != nil {
		return m.IssuerPublicKey
	}
	return ""
}

func (m *Issuance) GetRecipientPublicKey() string {
	if m != nil {
		return m.RecipientPublicKey
	}
	return ""
}

func (m *Issuance) GetRevokationStatus() bool {
	if m != nil {
		return m.RevokationStatus
	}
	return false
}

func (m *Issuance) GetProofOfIntegrityHash() string {
	if m != nil {
		return m.ProofOfIntegrityHash
	}
	return ""
}

func init() {
	proto.RegisterType((*Issuance)(nil), "issuer_pb.Issuance")
}

func init() { proto.RegisterFile("issuance.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x05, 0x60, 0xe2, 0x1f, 0x6d, 0x16, 0x6a, 0x43, 0xc1, 0x2c, 0x5c, 0x14, 0x57, 0x45, 0x41,
	0x04, 0xf1, 0x1d, 0x2c, 0x2e, 0x94, 0xfa, 0x00, 0x21, 0x2d, 0xb7, 0xed, 0xa5, 0x92, 0x84, 0xe4,
	0x46, 0xe8, 0x2b, 0xfb, 0x14, 0x32, 0x99, 0xe9, 0x74, 0x96, 0x39, 0xdf, 0x39, 0x84, 0xcb, 0xaf,
	0x31, 0x84, 0xa8, 0x4d, 0x0f, 0xcf, 0xce, 0x5b, 0xb2, 0x22, 0xdf, 0xbd, 0xc1, 0x2b, 0xd7, 0x3d,
	0xfc, 0x31, 0x9e, 0x35, 0x07, 0x15, 0xf7, 0x3c, 0x0f, 0x38, 0x1a, 0x4d, 0xd1, 0x83, 0x64, 0x15,
	0xab, 0xf3, 0x76, 0x0b, 0xc4, 0x23, 0x2f, 0xd6, 0x5d, 0xec, 0x7e, 0xb0, 0x57, 0x33, 0x2c, 0xf2,
	0x2c, 0xb5, 0x6e, 0xf6, 0xf0, 0x95, 0xf2, 0x0f, 0x58, 0xc4, 0x0b, 0x2f, 0x3d, 0xf4, 0xe8, 0x10,
	0x0c, 0x9d, 0xd6, 0xcf, 0x53, 0x5d, 0x1c, 0x6d, 0x5b, 0x3c, 0xf1, 0xc2, 0xc3, 0xaf, 0x9d, 0x35,
	0xa1, 0x35, 0x2a, 0x90, 0xa6, 0x18, 0xe4, 0x45, 0xc5, 0xea, 0xac, 0xbd, 0xdd, 0xe0, 0x3b, 0xe5,
	0xe2, 0x8d, 0xdf, 0x39, 0x6f, 0xed, 0xa0, 0xec, 0xa0, 0xd0, 0x10, 0x8c, 0x1e, 0x69, 0x51, 0x93,
	0x0e, 0x93, 0xbc, 0x4c, 0x3f, 0x94, 0x89, 0x3f, 0x87, 0x66, 0xc5, 0x77, 0x1d, 0xa6, 0xee, 0x2a,
	0x9d, 0xff, 0xfa, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x8f, 0x5f, 0x52, 0x10, 0x01, 0x00, 0x00,
}
