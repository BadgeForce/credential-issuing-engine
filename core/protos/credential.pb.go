// Code generated by protoc-gen-go. DO NOT EDIT.
// source: credential.proto

package badgeforce_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Credential struct {
	Data            string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Signature       string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	IssuanceAddress string `protobuf:"bytes,3,opt,name=issuance_address,json=issuanceAddress" json:"issuance_address,omitempty"`
	StorageHash     string `protobuf:"bytes,4,opt,name=storage_hash,json=storageHash" json:"storage_hash,omitempty"`
	TemplateName    string `protobuf:"bytes,5,opt,name=template_name,json=templateName" json:"template_name,omitempty"`
}

func (m *Credential) Reset()                    { *m = Credential{} }
func (m *Credential) String() string            { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()               {}
func (*Credential) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Credential) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Credential) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Credential) GetIssuanceAddress() string {
	if m != nil {
		return m.IssuanceAddress
	}
	return ""
}

func (m *Credential) GetStorageHash() string {
	if m != nil {
		return m.StorageHash
	}
	return ""
}

func (m *Credential) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

type Issuance struct {
	Signature            string `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	IssuerPublicKey      string `protobuf:"bytes,2,opt,name=issuer_public_key,json=issuerPublicKey" json:"issuer_public_key,omitempty"`
	RecipientPublicKey   string `protobuf:"bytes,3,opt,name=recipient_public_key,json=recipientPublicKey" json:"recipient_public_key,omitempty"`
	RevokationStatus     bool   `protobuf:"varint,4,opt,name=revokation_status,json=revokationStatus" json:"revokation_status,omitempty"`
	ProofOfIntegrityHash string `protobuf:"bytes,5,opt,name=proof_of_integrity_hash,json=proofOfIntegrityHash" json:"proof_of_integrity_hash,omitempty"`
	StorageHash          string `protobuf:"bytes,6,opt,name=storage_hash,json=storageHash" json:"storage_hash,omitempty"`
	TemplateName         string `protobuf:"bytes,7,opt,name=template_name,json=templateName" json:"template_name,omitempty"`
	TemplateAddress      string `protobuf:"bytes,8,opt,name=template_address,json=templateAddress" json:"template_address,omitempty"`
	Expiration           int32  `protobuf:"varint,9,opt,name=expiration" json:"expiration,omitempty"`
}

func (m *Issuance) Reset()                    { *m = Issuance{} }
func (m *Issuance) String() string            { return proto.CompactTextString(m) }
func (*Issuance) ProtoMessage()               {}
func (*Issuance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Issuance) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Issuance) GetIssuerPublicKey() string {
	if m != nil {
		return m.IssuerPublicKey
	}
	return ""
}

func (m *Issuance) GetRecipientPublicKey() string {
	if m != nil {
		return m.RecipientPublicKey
	}
	return ""
}

func (m *Issuance) GetRevokationStatus() bool {
	if m != nil {
		return m.RevokationStatus
	}
	return false
}

func (m *Issuance) GetProofOfIntegrityHash() string {
	if m != nil {
		return m.ProofOfIntegrityHash
	}
	return ""
}

func (m *Issuance) GetStorageHash() string {
	if m != nil {
		return m.StorageHash
	}
	return ""
}

func (m *Issuance) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *Issuance) GetTemplateAddress() string {
	if m != nil {
		return m.TemplateAddress
	}
	return ""
}

func (m *Issuance) GetExpiration() int32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func init() {
	proto.RegisterType((*Credential)(nil), "badgeforce_pb.Credential")
	proto.RegisterType((*Issuance)(nil), "badgeforce_pb.Issuance")
}

func init() { proto.RegisterFile("credential.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x4a, 0x3a, 0x41,
	0x18, 0xc5, 0x59, 0xff, 0xea, 0x5f, 0xbf, 0x14, 0x75, 0x10, 0xda, 0x8b, 0x08, 0xb3, 0x1b, 0x2b,
	0x88, 0x20, 0x7a, 0x80, 0xe8, 0x26, 0x09, 0x2a, 0xec, 0x01, 0x86, 0x6f, 0x77, 0xbf, 0x5d, 0x07,
	0x75, 0x66, 0x98, 0x99, 0x8d, 0x7c, 0xac, 0x1e, 0x30, 0x08, 0x67, 0x5d, 0xd7, 0xec, 0xa6, 0xbb,
	0xe5, 0x77, 0xce, 0x2e, 0xe7, 0x9c, 0x6f, 0xa1, 0x1f, 0x1b, 0x4a, 0x48, 0x3a, 0x81, 0xcb, 0x6b,
	0x6d, 0x94, 0x53, 0xac, 0x1b, 0x61, 0x92, 0x51, 0xaa, 0x4c, 0x4c, 0x5c, 0x47, 0xe3, 0xcf, 0x00,
	0xe0, 0x61, 0xe7, 0x61, 0x0c, 0xea, 0x09, 0x3a, 0x0c, 0x83, 0x51, 0x30, 0x69, 0xcf, 0xfc, 0x33,
	0x3b, 0x81, 0xb6, 0x15, 0x99, 0x44, 0x97, 0x1b, 0x0a, 0x6b, 0x5e, 0xa8, 0x00, 0xbb, 0x80, 0xbe,
	0xb0, 0x36, 0x47, 0x19, 0x13, 0xc7, 0x24, 0x31, 0x64, 0x6d, 0xf8, 0xcf, 0x9b, 0x7a, 0x25, 0xbf,
	0x2f, 0x30, 0x3b, 0x83, 0x8e, 0x75, 0xca, 0x60, 0x46, 0x7c, 0x8e, 0x76, 0x1e, 0xd6, 0xbd, 0xed,
	0x68, 0xcb, 0x1e, 0xd1, 0xce, 0xd9, 0x39, 0x74, 0x1d, 0xad, 0xf4, 0x12, 0x1d, 0x71, 0x89, 0x2b,
	0x0a, 0x1b, 0xde, 0xd3, 0x29, 0xe1, 0x33, 0xae, 0x68, 0xfc, 0x55, 0x83, 0xd6, 0x74, 0xfb, 0xed,
	0x9f, 0xe9, 0x82, 0xc3, 0x74, 0x97, 0x30, 0xd8, 0xa4, 0x20, 0xc3, 0x75, 0x1e, 0x2d, 0x45, 0xcc,
	0x17, 0xb4, 0xde, 0x76, 0xe8, 0x15, 0xc2, 0xab, 0xe7, 0x4f, 0xb4, 0x66, 0x37, 0x30, 0x34, 0x14,
	0x0b, 0x2d, 0x48, 0xba, 0x7d, 0x7b, 0xd1, 0x86, 0xed, 0xb4, 0xea, 0x8d, 0x2b, 0x18, 0x18, 0x7a,
	0x57, 0x0b, 0x74, 0x42, 0x49, 0x6e, 0x1d, 0xba, 0xdc, 0xfa, 0x56, 0xad, 0x59, 0xbf, 0x12, 0xde,
	0x3c, 0x67, 0x77, 0x70, 0xac, 0x8d, 0x52, 0x29, 0x57, 0x29, 0x17, 0xd2, 0x51, 0x66, 0x84, 0x5b,
	0x17, 0x43, 0x14, 0x25, 0x87, 0x5e, 0x7e, 0x49, 0xa7, 0xa5, 0xe8, 0x17, 0x39, 0x1c, 0xad, 0xf9,
	0x87, 0xd1, 0xfe, 0xff, 0x1e, 0x6d, 0x73, 0xa7, 0x9d, 0xa9, 0xbc, 0x53, 0xab, 0x18, 0xa2, 0xe4,
	0xe5, 0x9d, 0x4e, 0x01, 0xe8, 0x43, 0x0b, 0xe3, 0xd3, 0x87, 0xed, 0x51, 0x30, 0x69, 0xcc, 0xf6,
	0x48, 0xd4, 0xf4, 0x7f, 0xd2, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x49, 0x51, 0x85,
	0x5d, 0x02, 0x00, 0x00,
}
